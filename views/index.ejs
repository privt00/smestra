<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= name %> AI Chat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
</head>

<body class="h-screen bg-gradient-to-b from-neutral-900 to-black text-white flex flex-col">
    <div class="flex-1 flex flex-col overflow-hidden">
        <div id="chatConversation" class="flex-1 overflow-y-auto p-6 space-y-4">
            <div id="title" class="text-center animate-fadeIn">
                <h1 class="text-4xl font-extrabold text-purple-500 drop-shadow-md">Hello, I am <%= name %>!</h1>
                <h2 class="text-lg text-gray-300 mt-2">How can I assist you today?</h2>
            </div>
        </div>
        <div class="bg-neutral-800 p-4 flex items-center gap-2 border-t border-neutral-700">
            <input id="message-input" type="text" 
                class="flex-1 p-3 rounded-full bg-neutral-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Type your message..." />
            <button id="sendButton" 
                class="p-3 px-6 bg-purple-600 text-white rounded-full hover:bg-purple-700 transition transform active:scale-95">
                Send
            </button>
        </div>
    </div>

    <script>
        let chatHistory = [{ role: 'system', content: '<%= prompt %>' }];
        
        function appendMessage(role, content) {
            const chatContainer = document.getElementById('chatConversation');
            const msgElement = document.createElement('div');
            msgElement.className = `relative p-3 text-lg rounded-2xl max-w-xl ${
                role === 'user' 
                ? 'ml-auto bg-purple-600 text-white animate-slideInRight' 
                : 'bg-neutral-800 text-gray-300 animate-slideInLeft'
            }`;

            const messageContent = document.createElement('span');
            messageContent.innerHTML = content;

            msgElement.appendChild(messageContent);
            chatContainer.appendChild(msgElement);
            chatContainer.scrollTop = chatContainer.scrollHeight;

            return messageContent;
        }

        async function sendMessage() {
            const userInput = document.getElementById('message-input');
            const message = userInput.value.trim();
            if (!message) return;

            chatHistory.push({ role: 'user', content: message });
            appendMessage('user', message);
            userInput.value = '';

            document.getElementById('title').style.display = 'none';
            const responseElement = appendMessage('assistant', '');

            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ messages: chatHistory })
                });

                if (!response.ok) throw new Error(`Server error: ${response.status}`);

                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let accumulatedText = '';

                while (true) {
                    const { value, done } = await reader.read();
                    if (done) break;

                    accumulatedText += decoder.decode(value, { stream: true });
                    responseElement.innerHTML = marked.parse(accumulatedText);
                }

                chatHistory.push({ role: 'assistant', content: accumulatedText });
            } catch (error) {
                responseElement.innerHTML = `<span class="text-red-500">Error: ${error.message}</span>`;
            }
        }

        document.getElementById('sendButton').addEventListener('click', sendMessage);
        document.getElementById('message-input').addEventListener('keydown', event => {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });
    </script>

    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideInRight {
            from { opacity: 0; transform: translateX(50px); }
            to { opacity: 1; transform: translateX(0); }
        }
        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }
        .animate-fadeIn { animation: fadeIn 0.5s ease-out; }
        .animate-slideInRight { animation: slideInRight 0.3s ease-out; }
        .animate-slideInLeft { animation: slideInLeft 0.3s ease-out; }
    </style>

</body>

</html>
